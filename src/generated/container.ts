// Generated by AutoGen at 2025-07-08T11:30:25.567Z
import { DBImpl } from './db.service.impl';
import { UserServiceImpl } from './userservice.service.impl';

// A simple map of interface names to implementation classes
interface ServiceMap {
    'DB': DBImpl;
    'UserService': UserServiceImpl;
}

class Container {
    private instances: Map<keyof ServiceMap, any> = new Map();

    private factories: { [K in keyof ServiceMap]: () => ServiceMap[K] };

    constructor() {
        this.factories = {
        'DB': () => new DBImpl(),
        'UserService': () => new UserServiceImpl(this.get('DB'))
        };
    }

    public get<K extends keyof ServiceMap>(identifier: K): ServiceMap[K] {
        if (!this.instances.has(identifier)) {
            const factory = this.factories[identifier];
            if (!factory) {
                throw new Error('Service not found for identifier: ' + identifier);
            }
            const instance = factory();
            this.instances.set(identifier, instance);
        }
        return this.instances.get(identifier) as ServiceMap[K];
    }
}

export const container = new Container();
