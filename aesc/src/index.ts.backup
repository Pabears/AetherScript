#!/usr/bin/env bun
export * from './decorators';
import { Project, Node, InterfaceDeclaration, ClassDeclaration } from "ts-morph";
import * as fs from 'fs';
import * as path from 'path';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

// Import workflow modules
import { analyzeSourceFiles, getDependencies, type GeneratedService } from './file-analysis';
import { generatePrompt } from './prompts/implementation';
import { callOllamaModel } from './model-caller';
import { cleanGeneratedCode } from './code-cleaner';
import { postProcessGeneratedCode, validateGeneratedCode } from './post-processor';
import { 
    generateContainer, 
    saveGeneratedFile, 
    ensureOutputDirectory, 
    getLockData, 
    handleLockUnlock 
} from './file-saver';
import { fixGeneratedCode } from './code-fixer';
import { indexJSDocCommand, clearJSDocIndexCommand } from './commands/index-jsdoc';
import { listProvidersCommand, testProviderCommand, showProviderExamplesCommand, testGenerationCommand } from './commands/provider-commands';

// Configuration
const OUTPUT_DIR = 'src/generated';

// Re-export types for backward compatibility
export type { PropertyDependency, GeneratedService } from './file-analysis';
export type { OllamaResponse } from './model-caller';

// --- Core Generation Logic (User-provided) ---

/**
 * Scan for all existing service implementation files and combine with newly generated services
 * This ensures that skipped files are still registered in the container
 * Uses AST analysis to extract real interface names and dependencies from implementation files
 */
async function getAllExistingServices(
    outputDir: string, 
    project: Project, 
    newlyGeneratedServices: GeneratedService[]
): Promise<GeneratedService[]> {
    const allServices: GeneratedService[] = [...newlyGeneratedServices];
    const processedInterfaces = new Set(newlyGeneratedServices.map(s => s.interfaceName));
    
    if (!fs.existsSync(outputDir)) {
        return allServices;
    }
    
    // Scan for existing service implementation files
    const files = fs.readdirSync(outputDir);
    const serviceImplFiles = files.filter(file => file.endsWith('.service.impl.ts'));
    
    for (const file of serviceImplFiles) {
        const filePath = path.join(outputDir, file);
        
        try {
            // Use AST analysis to extract the real interface name from the implementation file
            const implSourceFile = project.addSourceFileAtPath(filePath);
            const classes = implSourceFile.getClasses();
            
            if (classes.length === 0) {
                console.log(`  -> Warning: No classes found in ${file}`);
                continue;
            }
            
            const implClass = classes[0]; // Should be the implementation class
            if (!implClass) {
                console.log(`  -> Warning: No implementation class found in ${file}`);
                continue;
            }
            
            const implClassName = implClass.getName();
            
            if (!implClassName || !implClassName.endsWith('Impl')) {
                console.log(`  -> Warning: Invalid implementation class name in ${file}: ${implClassName}`);
                continue;
            }
            
            // Extract interface name by removing 'Impl' suffix
            const interfaceName = implClassName.replace(/Impl$/, '');
            
            // Skip if already processed in current run
            if (processedInterfaces.has(interfaceName)) {
                continue;
            }
            
            // Find the original interface/abstract class declaration
            const sourceFiles = project.getSourceFiles();
            let originalDeclaration: InterfaceDeclaration | ClassDeclaration | undefined;
            
            for (const sourceFile of sourceFiles) {
                // Skip the implementation file itself
                if (sourceFile.getFilePath() === filePath) {
                    continue;
                }
                
                const interfaces = sourceFile.getInterfaces();
                const classes = sourceFile.getClasses();
                
                const foundInterface = interfaces.find(i => i.getName() === interfaceName);
                if (foundInterface) {
                    originalDeclaration = foundInterface;
                    break;
                }
                
                const foundClass = classes.find(c => c.getName() === interfaceName && c.isAbstract());
                if (foundClass) {
                    originalDeclaration = foundClass;
                    break;
                }
            }
            
            if (originalDeclaration) {
                // Extract dependencies from the original declaration using the same logic as handleGenerate
                const { constructorDeps, propertyDeps } = Node.isClassDeclaration(originalDeclaration) 
                    ? getDependencies(originalDeclaration as any)
                    : { constructorDeps: [], propertyDeps: [] };
                
                allServices.push({
                    interfaceName,
                    implName: implClassName,
                    implFilePath: `./${file}`,
                    constructorDependencies: constructorDeps,
                    propertyDependencies: propertyDeps,
                });
                
                console.log(`  -> Found existing service: ${interfaceName}`);
            } else {
                console.log(`  -> Warning: Could not find original declaration for ${interfaceName}`);
            }
        } catch (error) {
            console.error(`  -> Error processing existing service file ${file}:`, error);
        }
    }
    
    return allServices;
}

export async function handleGenerate(force: boolean, files: string[], verbose: boolean, model: string, provider?: string) {
    const totalStartTime = Date.now();
    console.log(`🚀 Starting code generation at ${new Date().toLocaleTimeString()}`);
    
    const project = new Project({
        tsConfigFilePath: "tsconfig.json",
    });

    const outputDir = path.join(process.cwd(), OUTPUT_DIR);
    
    // Step 1: File Analysis - Ensure output directory
    // Only clean entire directory if force is used AND no specific files are specified
    const shouldCleanEntireDirectory = force && files.length === 0;
    ensureOutputDirectory(outputDir, shouldCleanEntireDirectory);

    const lockedFiles = getLockData();
    const generatedServices: GeneratedService[] = [];

    console.log("Scanning for @AutoGen decorators...");

    // Step 1: File Analysis - Analyze source files
    const servicesToGenerate = analyzeSourceFiles(project, files);

    console.log(`📋 Found ${servicesToGenerate.size} service(s) to generate`);
    
    // Statistics tracking
    const fileStats: Array<{
        interfaceName: string;
        status: 'generated' | 'skipped' | 'locked' | 'error';
        duration?: number;
        error?: string;
    }> = [];

    // Step 2-6: Generate implementations for each unique service using workflow
    for (const [interfaceName, { declaration, sourceFile }] of servicesToGenerate.entries()) {
        const fileStartTime = Date.now();
        const implName = `${interfaceName}Impl`;
        const implFileName = `${interfaceName.toLowerCase()}.service.impl.ts`;
        const implFilePath = path.join(outputDir, implFileName);

        try {
            if (lockedFiles.includes(path.resolve(implFilePath))) {
                console.log(`  -> SKIPPED (locked): ${implFilePath}`);
                fileStats.push({
                    interfaceName,
                    status: 'locked',
                    duration: Date.now() - fileStartTime
                });
                continue;
            }
            
            // If force is used with specific files, delete only the corresponding impl file
            if (force && files.length > 0 && require('fs').existsSync(implFilePath)) {
                console.log(`  -> FORCE: Deleting existing file: ${implFilePath}`);
                require('fs').unlinkSync(implFilePath);
            }
            
            if (require('fs').existsSync(implFilePath) && !force) {
                console.log(`  -> SKIPPED: ${implFilePath} already exists. Use --force to overwrite.`);
                fileStats.push({
                    interfaceName,
                    status: 'skipped',
                    duration: Date.now() - fileStartTime
                });
                continue;
            }

            console.log(`  -> Generating implementation for ${interfaceName}...`);
            const originalImportPath = path.relative(path.dirname(implFilePath), declaration.getSourceFile().getFilePath()).replace(/\\/g, '/').replace(/\.ts$/, '');
            
            // Step 2: Prompt Generate
            const prompt = generatePrompt(declaration, originalImportPath, implFilePath);
            
            // Step 3: Model Call
            const rawResponse = await callOllamaModel(prompt, interfaceName, model, verbose, provider);
            
            // Step 4: Code Clear
            const cleanedCode = cleanGeneratedCode(rawResponse, interfaceName, verbose);
            
            // Step 5: Post Process
            let processedCode = postProcessGeneratedCode(cleanedCode, declaration, implFilePath);
            
            if (verbose) {
                console.log("--- CODE AFTER POST-PROCESSING ---");
                console.log(processedCode);
                console.log("--------------------------------");
            }

            let { isValid, errors } = await validateGeneratedCode(processedCode, declaration, implFilePath);
            
            // If validation fails, try to fix the code using the same model and provider
            if (!isValid) {
                const fixResult = await fixGeneratedCode(
                    processedCode,
                    declaration,
                    implFilePath,
                    originalImportPath,
                    interfaceName,
                    errors,
                    model,
                    verbose,
                    provider
                );
                
                if (fixResult.success && fixResult.fixedCode) {
                    processedCode = fixResult.fixedCode;
                    isValid = true;
                } else {
                    // If fix failed, record error and continue to next file
                    const fileDuration = Date.now() - fileStartTime;
                    fileStats.push({
                        interfaceName,
                        status: 'error',
                        duration: fileDuration,
                        error: `Validation failed after ${fixResult.attempts} retry attempts`
                    });
                    continue;
                }
            }

            // Step 6: Save File
            saveGeneratedFile(implFilePath, processedCode);

            // Extract dependencies from the original declaration, not the generated implementation
            const { constructorDeps, propertyDeps } = Node.isClassDeclaration(declaration) 
                ? getDependencies(declaration as any)
                : { constructorDeps: [], propertyDeps: [] };
                
            if (verbose) {
                console.log(`  -> Dependencies for ${interfaceName}:`);
                console.log(`     Constructor deps: ${JSON.stringify(constructorDeps)}`);
                console.log(`     Property deps: ${JSON.stringify(propertyDeps)}`);
            }
                
            generatedServices.push({
                interfaceName,
                implName,
                implFilePath: `./${implFileName}`,
                constructorDependencies: constructorDeps,
                propertyDependencies: propertyDeps,
            });
            
            const fileDuration = Date.now() - fileStartTime;
            fileStats.push({
                interfaceName,
                status: 'generated',
                duration: fileDuration
            });
            
            console.log(`  -> ✅ ${interfaceName} completed in ${(fileDuration / 1000).toFixed(2)}s`);
        } catch (error) {
            const fileDuration = Date.now() - fileStartTime;
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            console.error(`  -> ❌ Failed to generate ${interfaceName}: ${errorMessage}`);
            fileStats.push({
                interfaceName,
                status: 'error',
                duration: fileDuration,
                error: errorMessage
            });
        }
    }

    // Always generate container to include all existing services, not just newly processed ones
    console.log("\nGenerating DI container...");
    
    // Scan for all existing service implementation files in the output directory
    const allServices = await getAllExistingServices(outputDir, project, generatedServices);
    
    if (allServices.length > 0) {
        await generateContainer(outputDir, allServices);
        console.log(`DI container generated successfully with ${allServices.length} services.`);
    } else {
        console.log("No services found to register in container.");
    }

    // Print final statistics
    const totalDuration = Date.now() - totalStartTime;
    console.log('\n📊 Generation Statistics:');
    console.log('=' .repeat(50));
    
    const generated = fileStats.filter(f => f.status === 'generated');
    const skipped = fileStats.filter(f => f.status === 'skipped');
    const locked = fileStats.filter(f => f.status === 'locked');
    const errors = fileStats.filter(f => f.status === 'error');
    
    console.log(`✅ Generated: ${generated.length} files`);
    console.log(`⏭️  Skipped: ${skipped.length} files`);
    console.log(`🔒 Locked: ${locked.length} files`);
    console.log(`❌ Errors: ${errors.length} files`);
    
    if (generated.length > 0) {
        const avgTime = generated.reduce((sum, f) => sum + (f.duration || 0), 0) / generated.length;
        const minTime = Math.min(...generated.map(f => f.duration || 0));
        const maxTime = Math.max(...generated.map(f => f.duration || 0));
        
        console.log('\n⏱️  Timing Details:');
        console.log(`   Average per file: ${(avgTime / 1000).toFixed(2)}s`);
        console.log(`   Fastest: ${(minTime / 1000).toFixed(2)}s`);
        console.log(`   Slowest: ${(maxTime / 1000).toFixed(2)}s`);
        
        if (verbose) {
            console.log('\n📋 Individual File Times:');
            generated.forEach(f => {
                console.log(`   ${f.interfaceName}: ${((f.duration || 0) / 1000).toFixed(2)}s`);
            });
        }
    }
    
    if (errors.length > 0) {
        console.log('\n❌ Error Details:');
        errors.forEach(f => {
            console.log(`   ${f.interfaceName}: ${f.error} (${((f.duration || 0) / 1000).toFixed(2)}s)`);
        });
    }
    
    console.log('=' .repeat(50));
    console.log(`🏁 Total generation time: ${(totalDuration / 1000).toFixed(2)}s`);
    console.log(`🕐 Completed at ${new Date().toLocaleTimeString()}`);
}

// --- CLI Setup ---
function main() {
    yargs(hideBin(process.argv))
    .command('gen [files...]', 'Generate implementations for services', (yargs) => {
        return yargs
            .positional('files', { describe: 'A list of interface/class names or filenames to generate.', type: 'string', array: true, default: [] })
            .option('force', { alias: 'f', type: 'boolean', description: 'Force overwrite of existing implementation files', default: false })
            .option('verbose', { alias: 'v', type: 'boolean', description: 'Print the full prompt sent to AI model for debugging', default: false })
            .option('model', { alias: 'm', type: 'string', description: 'Specify the AI model to use', default: 'codellama' })
            .option('provider', { alias: 'p', type: 'string', description: 'Specify the AI provider to use (ollama, cloudflare)', default: undefined });
    }, (argv) => {
        handleGenerate(argv.force, argv.files as string[], argv.verbose, argv.model, argv.provider).catch(err => console.error("An unexpected error occurred:", err));
    })
    .command('lock <paths...>', 'Lock a file or a directory to prevent regeneration', (yargs) => {
        return yargs.positional('paths', { describe: 'File or directory paths to lock', type: 'string', demandOption: true, array: true });
    }, (argv) => handleLockUnlock(argv.paths as string[], 'lock'))
    .command('unlock <paths...>', 'Unlock a file or a directory', (yargs) => {
        return yargs.positional('paths', { describe: 'File or directory paths to unlock', type: 'string', demandOption: true, array: true });
    }, (argv) => handleLockUnlock(argv.paths as string[], 'unlock'))
    .command('index-jsdoc [path]', 'Index JSDoc documentation for all dependencies', (yargs) => {
        return yargs.positional('path', { describe: 'Project path to index (defaults to current directory)', type: 'string' });
    }, (argv) => {
        indexJSDocCommand(argv.path).catch(err => console.error('JSDoc indexing failed:', err));
    })
    .command('clear-jsdoc [path]', 'Clear JSDoc index cache', (yargs) => {
        return yargs.positional('path', { describe: 'Project path to clear cache for (defaults to current directory)', type: 'string' });
    }, (argv) => {
        clearJSDocIndexCommand(argv.path);
    })
    .command('list-providers', 'List all available and configured AI providers', () => {}, () => {
        listProvidersCommand().catch(err => console.error('Failed to list providers:', err));
    })
    .command('test-provider [name]', 'Test connection to a specific provider', (yargs) => {
        return yargs.positional('name', { describe: 'Provider name to test (defaults to default provider)', type: 'string' });
    }, (argv) => {
        testProviderCommand(argv.name).catch(err => console.error('Provider test failed:', err));
    })
    .command('provider-examples', 'Show provider configuration examples', () => {}, () => {
        showProviderExamplesCommand();
    })
    .command('test-generation [provider] [model]', 'Test code generation with a provider', (yargs) => {
        return yargs
            .positional('provider', { describe: 'Provider name to test', type: 'string' })
            .positional('model', { describe: 'Model to test with', type: 'string' });
    }, (argv) => {
        testGenerationCommand(argv.provider, argv.model).catch(err => console.error('Generation test failed:', err));
    })
    .demandCommand(1, 'You need at least one command before moving on')
    .help()
    .parse();
}

// Run the CLI only if the script is executed directly
if (process.argv[1] && import.meta.url.endsWith(process.argv[1])) {
    main();
}
